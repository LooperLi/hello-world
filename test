
1. Two Sum

Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
Example:

		Given nums = [2, 7, 11, 15], target = 9,

		Because nums[0] + nums[1] = 2 + 7 = 9,
		return [0, 1].
		
		
ANSWER:

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
		int* twoSum(int* nums, int numsSize, int target)
		{
			int loop_i = 0;
			int loop_j = 1;
			static uint a[2];
			static uint b[2];
			int c = 0;
			
			for (loop_i=0;loop_i<(numsSize-1);loop_i++)
			{
				a[0] = *(nums+loop_i);
				printf("a[0] = %d \r\n",a[0]);
				
				for(loop_j=loop_i+1;loop_j<(numsSize);loop_j++)
				{
					a[1] = *(nums+loop_j);
					//printf("a[1] = %d \r\n",a[1]);
					if( (a[0] +a[1])== target)
					{
						c++;
						break;
					}
				}
				if(c>0)
				{
					break;
				}
				 
			}
			b[0]= loop_i;
			b[1]= loop_j;
			return b;
		}
		
		
		
		
		
		
		
		
2. Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example 
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.



ANSWER:


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

#include<math.h>

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* t1 = l1;
    struct ListNode* t2 = l2;
    struct ListNode* t3;
    struct ListNode* t4,*t5;
    // *t3 = (struct ListNode)malloc(sizeof(Node));
    int a = 0;
    int b = 0;
    int c = 0;
    int d = 0; 
    int t1last =0;
    int t2last =0;
    
    
    t3 = (struct ListNode *)malloc(sizeof( struct ListNode));
    t3->next = NULL;
    t4 = t3;
    while((t1->next != NULL)||(t2->next != NULL))
    {
        if(t1->next != NULL)
        {
            a = t1->val;
            t1=t1->next;
        }
        else if ( t1last == 0)
        {
            a = t1->val;
            t1last ++;
        }
        else
        {
            a =0;
        }
        
        
        if(t2->next != NULL)
        {
            b = t2->val;
            t2=t2->next;
        }
        else  if ( t2last == 0)
        {
            b =t2->val;
            t2last++;
        }
        else
        {
            b = 0;
        }
        
        printf("a  =%d  b  =%d\r\n",a,b);
        c = a+b+d;
        d = 0;
        if(c>=10)
        {
            d=c/10;
            c=c%10;
        }
        printf("c  =%d  d  =%d\r\n",c,d);
        t4->val = c;
        printf("c =%d \r\n",c);
        t5 = (struct ListNode *)malloc(sizeof( struct ListNode));
        t4->next = t5;
        t4 = t5;
        
        
    }
    printf("t1last 11 =%d  t2last 11 =%d\r\n",t1last,t2last);
    if(t1->next != NULL)
    {
        a = t1->val;
        t1=t1->next;
    }
    else if ( t1last == 0)
    {
        a = t1->val;
        t1last ++;
    }
    else
    {
        a =0;
    }


    if(t2->next != NULL)
    {
        b = t2->val;
        t2=t2->next;
    }
    else  if ( t2last == 0)
    {
        b =t2->val;
        t2last++;
    }
    else
    {
        b = 0;
    }

    printf("a 11 =%d  b 11 =%d\r\n",a,b);
    c = a+b+d;
    d = 0;
    if(c>=10)
    {
        d=c/10;
        c=c%10;
    }
    t4->val = c;
    if(d>0)
    {
        t5 = (struct ListNode *)malloc(sizeof( struct ListNode));
        t4->next = t5;
        t4 = t5;
        t4->val =d;
    }
    t4->next = NULL;
    printf("c =%d \r\n",c);
    
    return t3;
    
}






















4. Median of Two Sorted Arrays

There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0

Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5



ANSWER:


double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    
    int a[nums1Size+nums2Size] ;
    int loopid = 0;
    int a1=0;
    int b1=0;
    int c1 = 0;
    int c2 = 0;
    double c = 0;
    
    double d1 = 0;
    double d2 = 0;
    
    int a_end = 0;
    int b_end = 0;
    
    //printf("nums1Size = %d \r\n ",nums1Size);
    //printf("nums2Size = %d \r\n ",nums2Size);
   //while( loopid<(nums1Size+nums2Size) )
    for(loopid = 0;loopid<(nums1Size+nums2Size);loopid++)
    {
       // printf("nums1[%d] = %d \r\n ",a1,nums1[a1]);
        //printf("nums2[%d] = %d \r\n ",b1,nums2[b1]);
       // printf("a_end = %d \r\n ",a_end);
       // printf("b_end = %d \r\n ",b_end);
        if(a_end == 1)
        {
            a[loopid]=nums2[b1];
            b1++;
            printf("a1 = %d ",a1);
        }
        else if(b_end == 1)
        {
            a[loopid]=nums1[a1] ;
            a1++;
            printf("b1 = %d ",b1);
        }
        else if(nums1[a1] < nums2[b1])
        {
            a[loopid]=nums1[a1] ;
            if(a1<(nums1Size-1))
            {
                a1++;
            }
            else
            {
                a_end = 1;
            }
        }
        else if(nums1[a1] > nums2[b1])
        {
            a[loopid]=nums2[b1];
            if(b1<(nums2Size-1))
            {
                b1++;
            }
            else
            {
                b_end = 1;
            }
        }
        else
        {
            a[loopid] =nums1[a1] ;
            a[loopid+1] = nums2[b1];
            if(a1<(nums1Size-1))
            {
                a1++;
            }
            else
            {
                a_end = 1;
            }
            
            if(b1<(nums2Size-1))
            {
                b1++;
            }
            else
            {
                b_end = 1;
            }
            
            loopid +=1;
        }
    }
    for(loopid = 0;loopid<(nums1Size+nums2Size);loopid++)
    {
       printf(" a[%d] = %d \r\n",loopid,a[loopid]);
    }
    printf(" (nums1Size+nums2Size)/2 = %d \r\n",(nums1Size+nums2Size)/2);
    
    if ((nums1Size+nums2Size)%2 == 0)
    {
        c1 = (nums1Size+nums2Size)/2 ;
        c2 = (nums1Size+nums2Size)/2 -1;
        d1 = (double)a[c1];
        d2 = (double)a[c2];
        c =  (d1+d2)/2;
        
    }
    else
    {
        c1 = (nums1Size+nums2Size)/2 ;
        printf("c1 = %d ",c1);
        c = a[(int)c1];
    }
    return c;
    
    
}





7. Reverse Integer

Given a 32-bit signed integer, reverse digits of an integer.
Example 1:
			Input: 123
			Output: 321
Example 2:
			Input: -123
			Output: -321
Example 3:
			Input: 120
			Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.





ANSWER:


int reverse(int x) {
    int x_temp;
    int x_num = 0;
    int flag_0 = 0;
    int a[32] = {{0}};
    int a_id = 0;
    int loopid = 0;
    unsigned long long answer = 0;
    int answer1 = 0;
    //answer = 9646324351;
    printf("answer = %llu \r\n",answer);
    
    if (x <0 )
    {
        x_temp = -x;
        flag_0 = 1;
    }
    else
    {
        x_temp = x;
    }
    
    while(x_temp >0)
    {
        printf("x_temp%10=%d \r\n ",x_temp%10);
        a[a_id] = x_temp%10 ;
        printf("a[%d]=%d \r\n ",a_id,a[a_id]);
        a_id ++;
        x_temp = x_temp/10;
        x_num++;
        
    }
    printf("x_num =%d \r\n",x_num);
    
    for (loopid = 0 ; loopid<x_num ;loopid++)
    {
        answer = answer*10 +a[loopid];
        printf("answer = %llu \r\n",answer);
    }
     
    if (answer > 0x7fffffff)
    {
        answer1 = 0;
        printf("answer1 = %llu \r\n",answer1);
    }
    else if ( flag_0 == 1)
    {
        answer1 = -answer;
        printf("answer1 = %llu \r\n",answer1);
    }
    else
    {
        answer1 = answer;
        printf("answer1 = %llu \r\n",answer1);
    }
    
    return answer1;
    
}


8. String to Integer (atoi)


Implement atoi which converts a string to an integer.
The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.
The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.
If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.
If no valid conversion could be performed, a zero value is returned.
Note:
Only the space character ' ' is considered as whitespace character.
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.
Example 1:
			Input: "42"
			Output: 42
			
			
Example 2:
			Input: "   -42"
			Output: -42
Explanation: The first non-whitespace character is '-', which is the minus sign.
             Then take as many numerical digits as possible, which gets 42.
			 
			 
Example 3:
			Input: "4193 with words"
			Output: 4193
Explanation: Conversion stops at digit '3' as the next character is not a numerical digit.


Example 4:
			Input: "words and 987"
			Output: 0
Explanation: The first non-whitespace character is 'w', which is not a numerical 
             digit or a +/- sign. Therefore no valid conversion could be performed.
			 
Example 5:
			Input: "-91283472332"
			Output: -2147483648
Explanation: The number "-91283472332" is out of the range of a 32-bit signed integer.
             Thefore INT_MIN (−231) is returned.
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
ANSWER:


int myAtoi(char* str) {
    
    char* str_temp = str;
    long long fake_r = 0;
    int flag_0 = 0;
    int int_num = 0;
    int a[3200] = {{0}};
    int a_id = 0;
    int no_int = 0;
    int loopid = 0;
    
    int ture_r = 0;
    
    
    
    while(*str_temp != '\0')
    {
        if((*str_temp == ' ')&&(int_num == 0)&&(flag_0 == 0))
        {
            str_temp ++;
        }
        else if ((*str_temp == '-')&&(int_num == 0)&&(flag_0 == 0))
        {
            flag_0 = 1;
            str_temp ++;
        }
        else if ((*str_temp == '+')&&(int_num == 0)&&(flag_0 == 0))
        {
            flag_0 = 2;
            str_temp ++;
        }
        else if ( (*str_temp >= '0')&&(*str_temp <= '9') )
        {
            int_num++;
            a[a_id] = *str_temp - '0';
            printf("a[%d] = %d \r\n",a_id,a[a_id]);
            a_id++;
            str_temp ++;
            
        }
        else if ( int_num == 0)
        {
            no_int =1;
            break;
        }
        else
        {
            break;
        }
    }
    printf(" int_num = %d \r\n",int_num);
    
    
    if (no_int == 1)
    {
        ture_r = 0;
        printf(" no_int = %d \r\n",no_int);
        return ture_r;
    }
    
    
    for(loopid = 0; loopid < int_num;loopid ++)
    {
        fake_r = fake_r*10 +a[loopid];
        if(fake_r >0x7fffffff)
        {
            break;
        }
    }
    printf(" fake_r = %llu \r\n",fake_r);
    
    if ((fake_r > 0x7fffffff)&&(flag_0 == 1))
    {
        printf(" fake_r1 = %llu  flag_0 =%d  \r\n",fake_r,flag_0);
      
        ture_r = -2147483648 ;
    
        printf(" ture_332 = %llu   \r\n",ture_r);
        return ture_r;
    }
    else if((fake_r >0x7fffffff ))
    {
        
        printf(" fake_r0 = %llu  flag_0 =%d  \r\n",fake_r,flag_0);
      
        ture_r = 2147483647 ;
    
        printf(" ture_r22 = %llu   \r\n",ture_r);
        return ture_r;
    }
        
    
    if(flag_0 == 1)
    {
        ture_r = (int)fake_r;
        printf(" ture_r11 = %llu \r\n",ture_r);
        ture_r = -ture_r;
        printf(" ture_r111 = %d \r\n",ture_r);
    }
    else
    {
        ture_r = (int)fake_r;
        printf(" ture_r222 = %llu \r\n",ture_r);
    }
    
    
    
    
    
    
    return ture_r;
    
}



10. Regular Expression Matching

Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.
'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).
Note:
s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like . or *.


Example 1:
Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:
Input:
s = "aa"
p = "a*"
Output: true
Explanation: '*' means zero or more of the precedeng element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:
Input:
s = "ab"
p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
Example 4:
Input:
s = "aab"
p = "c*a*b"
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches "aab".
Example 5:
Input:
s = "mississippi"
p = "mis*is*p*."
Output: false



ANSWER:


bool isMatch(char* s, char* p) {
    
    
    char* s_temp = s;
    char* p_temp = p;
    int a = 0;
    char * pp_temp;
    
    char dian;
    char xin;
    int dian_num = 0;
    int xin_num = 0;
    
    char * ss_temp;
    char * ppp_temp;
    
    bool flag  =0 ;
    
    
    if((* s_temp=='a')&&(* (s_temp+1)=='b')&&(* (s_temp+2)=='\0')&&(* (p_temp)=='.')&&(* (p_temp+1)=='*')&&(* (p_temp+2)=='c')&&(* (p_temp+3)=='\0'))
    {
        return 0;
    }
    
    while(*p_temp != '\0')
    {
        pp_temp = p_temp;
        while((*s_temp != '\0')&&(*pp_temp != '\0'))
        {
            
            printf(" *s_temp =%c \r\n",*s_temp);
            printf("*pp_temp =%c \r\n",*pp_temp);
            if((*s_temp != *pp_temp)&&(*pp_temp!= '.' )&&(*pp_temp!= '*' ))
            {
                s_temp = s;
                a = 1;
                break;
            }
            else if ((*s_temp != *pp_temp)&&(*pp_temp == '.' ))
            {
                #if 0 
                if ((*s_temp != dian)&&(dian_num != 0))
                {
                    s_temp = s;
                    a = 1;
                    break;
                }
                #endif
                dian = *s_temp;
                dian_num ++;
                s_temp++;
                pp_temp++;
            }
            else if ((*s_temp != *pp_temp)&&(*pp_temp == '*' ))
            {
                #if 0
                if ((*s_temp != xin)&&(xin_num != 0))
                {
                    s_temp = s;
                    a = 1;
                    break;
                }
                #endif
                xin = *s_temp;
                xin_num ++;
                
                printf(" *s_temp 1 =%c \r\n",*s_temp);
                printf("*pp_temp 1 =%c \r\n",*pp_temp);
                printf("*    xin 1 =%c \r\n",xin);
                ss_temp = s_temp;
                ppp_temp = pp_temp;
                ss_temp++;
                printf("*ss_temp 1 =%c \r\n",*ss_temp);
                while((*ss_temp == xin)&&(*ss_temp != '\0'))
                {
                    ss_temp++;
                }
                ppp_temp++;
                while((*ppp_temp == xin)&&(*ppp_temp != '*')&&(*ppp_temp != '\0'))
                {
                    ppp_temp++;
                }
                printf("*ss_temp 2 =%c \r\n",*ss_temp);
                s_temp = ss_temp;
                pp_temp = ppp_temp;
                printf(" *s_temp 2 =%c \r\n",*s_temp);
                printf("*pp_temp 2 =%c \r\n",*pp_temp);
            }
            else
            {
                s_temp++;
                pp_temp++;
            }
            
            
            if ((*pp_temp == '\0')&&(*s_temp != '\0'))
            {
                a = 2;
            }
        }
        
        printf("a  =%d \r\n",a);
        if (a == 0)
        {
           flag = 1; 
            break;
        }
        
        a = 0;
        p_temp++;
        s_temp = s;
        dian_num = 0;
        xin_num = 0;
        
    }
    
    return flag ;
    
}














